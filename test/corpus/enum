/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


===============================
Test an enum with a custom type
===============================

namespace java thrift.test.enumcontainers

enum GreekGodGoddess {
    ARES,
    APHRODITE,
    ZEUS,
    POSEIDON,
    HERA,
}

typedef GreekGodGoddess GreekGodGoddessType
typedef i32 Power

struct GodBean {
    1: optional map<GreekGodGoddessType, Power> power,
    2: optional set<GreekGodGoddessType> goddess,
    3: optional map<string, GreekGodGoddess> byAlias,
    4: optional set<string> images,
}

const map<GreekGodGoddessType, string> ATTRIBUTES =
{
    GreekGodGoddess.ZEUS: "lightning bolt",
    GreekGodGoddess.POSEIDON: "trident",
}

const set<GreekGodGoddessType> BEAUTY = [ GreekGodGoddess.APHRODITE, GreekGodGoddess.HERA ]

---

(document
      (header
        (namespace
          (namespace_scope)
          (namespace_definition)))
      (definition
        (enum
          (enum_identifier)
          (enum_member)
          (list_separator)
          (enum_member)
          (list_separator)
          (enum_member)
          (list_separator)
          (enum_member)
          (list_separator)
          (enum_member)
          (list_separator)))
      (definition
        (typedef
          (definition_type
            (custom_type
              (identifier)))
          (typedef_definition)))
      (definition
        (typedef
          (definition_type
            (primitive_type))
          (typedef_definition)))
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_modifier)
            (field_type
              (container_type
                (map_type
                  (field_type
                    (identifier))
                  (field_type
                    (identifier)))))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_modifier)
            (field_type
              (container_type
                (set_type
                  (field_type
                    (identifier)))))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_modifier)
            (field_type
              (container_type
                (map_type
                  (field_type
                    (primitive_type))
                  (field_type
                    (identifier)))))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_modifier)
            (field_type
              (container_type
                (set_type
                  (field_type
                    (primitive_type)))))
            (field_identifier)
            (list_separator))))
      (definition
        (const
          (field_type
            (container_type
              (map_type
                (field_type
                  (identifier))
                (field_type
                  (primitive_type)))))
          (const_identifier)
          (const_value
            (const_map
              (const_value
                (type_identifier)
                (const_identifier))
              (const_value
                (string_literal))
              (list_separator)
              (const_value
                (type_identifier)
                (const_identifier))
              (const_value
                (string_literal))
              (list_separator)))))
      (definition
        (const
          (field_type
            (container_type
              (set_type
                (field_type
                  (identifier)))))
          (const_identifier)
          (const_value
            (const_list
              (const_value
                (type_identifier)
                (const_identifier))
              (list_separator)
              (const_value
                (type_identifier)
                (const_identifier)))))))
