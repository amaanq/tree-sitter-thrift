/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


=====================================
Test a typedef with a type annotation
=====================================

typedef list<i32> ( cpp.template = "std::list" ) int_linked_list


---

(document
      (definition
        (typedef
          (definition_type
            (container_type
              (list_type
                (field_type
                  (primitive_type)))))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value))
          (typedef_definition))))



======================================
Test a struct field with an annotation
======================================

struct foo {
  1: i32 bar ( presence = "required" );
}

---

(document
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator)))))



==============================================
Test a struct field with a list of annotations
==============================================

struct foo {
  1: i32 bar ( presence = "required" );
  2: i32 baz ( presence = "manual", cpp.use_pointer = "", );
  3: i32 qux;
  4: i32 bop;
}

---

(document
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator)))))



================================
Test a struct with an annotation
================================

struct foo {
  1: i32 bar ( presence = "required" );
  2: i32 baz ( presence = "manual", cpp.use_pointer = "", );
  3: i32 qux;
  4: i32 bop;
} ( cpp.type = "DenseFoo" )

---

(document
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



========================================
Test a struct with a list of annotations
========================================

struct foo {
  1: i32 bar ( presence = "required" );
  2: i32 baz ( presence = "manual", cpp.use_pointer = "", );
  3: i32 qux;
  4: i32 bop;
} (
  cpp.type = "DenseFoo",
  python.type = "DenseFoo",
  java.final = "",
)

---

(document
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)
            (annotation_definition
              (annotation_identifier))
            (annotation_value)
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



==============================================
Test a struct with an annotation with no value
==============================================

struct foo {
  1: i32 bar ( presence = "required" );
  2: i32 baz ( presence = "manual", cpp.use_pointer = "", );
  3: i32 qux;
  4: i32 bop;
} (
  cpp.type = "DenseFoo",
  python.type = "DenseFoo",
  java.final = "",
  annotation.without.value,
)

---

(document
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)
            (annotation_definition
              (annotation_identifier))
            (annotation_value)
            (annotation_definition
              (annotation_identifier))
            (annotation_value)
            (annotation_definition
              (annotation_identifier))))))



====================================================
Test a typedef with a type and identifier annotation
====================================================

typedef string ( unicode.encoding = "UTF-16" ) non_latin_string (foo="bar")

---

(document
      (definition
        (typedef
          (definition_type
            (primitive_type))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value))
          (typedef_definition)
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



============================================================
Test a typedef with a container type which has an annotation
============================================================

typedef list< double ( cpp.fixed_point = "16" ) > tiny_float_list

---

(document
      (definition
        (typedef
          (definition_type
            (container_type
              (list_type
                (field_type
                  (primitive_type))
                (annotation
                  (annotation_definition
                    (annotation_identifier))
                  (annotation_value)))))
          (typedef_definition))))



================================================
Test an enum with a field that has an annotation
================================================

enum weekdays {
  SUNDAY ( weekend = "yes" ),
  MONDAY,
  TUESDAY,
  WEDNESDAY,
  THURSDAY,
  FRIDAY,
  SATURDAY ( weekend = "yes" )
}

---

(document
      (definition
        (enum
          (type_identifier)
          (enum_identifier)
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value))
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



===============================
Test an enum with an annotation
===============================

enum weekdays {
  SUNDAY ( weekend = "yes" ),
  MONDAY,
  TUESDAY,
  WEDNESDAY,
  THURSDAY,
  FRIDAY,
  SATURDAY ( weekend = "yes" )
} (foo.bar="baz")

---

(document
      (definition
        (enum
          (type_identifier)
          (enum_identifier)
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value))
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (list_separator)
          (enum_identifier)
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



===================================================
Test a service with a method that has an annotation
===================================================

service foo_service {
  void foo() ( foo = "bar" )
}

---

(document
      (definition
        (service
          (type_identifier)
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))))))



=================================
Test a service with an annotation
=================================

service foo_service {
  void foo() ( foo = "bar" )
} (a.b="c")

---

(document
      (definition
        (service
          (type_identifier)
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)))
          (annotation
            (annotation_definition
              (annotation_identifier))
            (annotation_value)))))



==========================================
Test a service with deprecated annotations
==========================================

service deprecate_everything {
  void Foo( ) ( deprecated = "This method has neither 'x' nor \"y\"" )
  void Bar( ) ( deprecated = "Fails to deliver 中文 колбаса" )
  void Baz( ) ( deprecated = "Need this to work with tabs (\t) or Umlauts (äöüÄÖÜß) too" )
  void Deprecated() ( deprecated ) // no comment
}

---

(document
      (definition
        (service
          (type_identifier)
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)))
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)))
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value)))
          (function
            (function_type)
            (type_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))))
          (comment))))



=====================================================
Test a struct with an annotation and comma at the end
=====================================================

namespace java thrift.test.annotations

struct OneOfEachBeansWithAnnotations {
  1: bool boolean_field,
  2: byte a_bite (compression = "false"),
  3: i16 integer16 (must_be_postive = "true"),
  4: i32 integer32,
  5: i64 integer64,
  6: double double_precision (nan_inf_allowed = "false"),
  7: string some_characters,
  8: binary base64,
  9: list<byte> byte_list (non_empty = "true"),
  10: list<i16> i16_list,
  11: list<i64> i64_list
}

---

(document
      (header
        (namespace
          (namespace_scope)
          (namespace_definition)))
      (definition
        (struct
          (type_identifier)
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (primitive_type))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (container_type
                (list_type
                  (field_type
                    (primitive_type)))))
            (field_identifier)
            (annotation
              (annotation_definition
                (annotation_identifier))
              (annotation_value))
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (container_type
                (list_type
                  (field_type
                    (primitive_type)))))
            (field_identifier)
            (list_separator))
          (field
            (field_id
              (number))
            (field_type
              (container_type
                (list_type
                  (field_type
                    (primitive_type)))))
            (field_identifier)))))
